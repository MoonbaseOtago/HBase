/** \file
 *
 *  This file contains special DoxyGen information for the generation of the main page and other special
 *  documentation pages. It is not a project source file.
 */

/**
 *  \mainpage MyUSB Library
 *
 *  Written by Dean Camera, 2008.
 *
 *  \section Sec_About About this library
 *
 *  Originally based on the AT90USBKEY from Atmel, it is an open-source, driver for the USB-enabled AVR
 *  microcontrollers, released under the Lesser GNU Public Licence, Version 3. Currently, the AT90USB1286,
 *  AT90USB1287, AT90USB646, AT90USB647, AT90USB162, AT90USB82 and ATMEGA32U4 AVR microcontrollers are supported
 *  by the library. Supported boards are the USBKEY, STK525, STK526 and RZUSBSTICK.
 *
 *  The library is currently in a stable release, suitable for download and incorporation into user projects for
 *  both host and device modes. For information about the project progression, check out my blog.
 *
 *  MyUSB is written specifically for the free AVR-GCC compiler, and uses several GCC-only extensions to make the
 *  library API more streamlined and robust. You can download AVR-GCC for free in a convenient windows package, 
 *  from the the WinAVR website.
 *
 *  \section Sec_Links Library Links
 *  Project Homepage: http://www.fourwalledcubicle.com/MyUSB.php \n
 *  Development Blog: http://www.fourwalledcubicle.com/blog \n
 *  Author's Website: http://www.fourwalledcubicle.com \n
 *
 *  WinAVR Website: http://winavr.sourceforge.net \n
 *  avr-libc Website: http://www.nongnu.org/avr-libc/ \n
 *
 *  USB-IF Website: http://www.usb.org \n
 *
 *  \section Sec_License License
 *  The MyUSB library is currently released under the LGPL licence, version 3. Please see the license file
 *  included with the library before use.
 *
 *  \section Sec_Compiling Compiling
 *  To compile projects built from the MyUSB library, you will need a recent distribution of avr-libc (1.6.2+)
 *  and AVR-GCC (4.2+).
 *
 *
 *  \section Sec_Demos Demos and Bootloaders
 *  The MyUSB library ships with several different host and device demos, located in the /Demos/ subdirectory.
 *  If this directory is missing, please re-download the project from the project homepage.
 *
 *  Also included with the library are two fully functional bootloaders, one using the DFU USB class and is
 *  compatible with Atmel's FLIP software or the open source dfu-programmer project, and the other using the
 *  CDC class and the AVR109 protocol to be compatible with such open source software as avrdude and AVR-OSP.
 *
 *  \section Sec_Donations Donate
 *  I am a 19 year old University student studying for a double degree in Computer Science and Electronics
 *  Engineering. This leaves little time for any sort of work or leisure. Please consider donating a small amount
 *  to myself to support this and my future Open Source projects. You can donate any amount via PayPal on my
 *  website, http://www.fourwalledcubicle.com . All donations are greatly appreciated.
 */
 
 /** \page Page_VIDPID VID and PID values
  *
  *  The MyUSB library uses VID/PID combinations generously donated by Atmel. The following VID/PID combinations
  *  are used within the MyUSB demos, and thus may be re-used by derivations of each demo. Free PID values may be
  *  used by future MyUSB demo projects.
  *
  *  These VID/PID values should not be used in commercial designs under any circumstances. Private projects may
  *  use the following values freely, but must accept any collisions due to other MyUSB derived private projects
  *  sharing identical values. It is suggested that private projects using interfaces compatible with existing
  *  demos share the save VID/PID value.
  *
  *  <table>
  *
  *   <tr>
  *    <td>
  *     VID
  *    </td>
  *    <td>
  *     PID
  *    </td>
  *    <td>
  *     Usage
  *    </td>
  *   </tr>
  *
  *   <tr>
  *    <td>
  *     0x03EB
  *    </td>
  *    <td>
  *     0x2040
  *    </td>
  *    <td>
  *     Test Application
  *    </td>
  *
  *   <tr>
  *    <td>
  *     0x03EB
  *    </td>
  *    <td>
  *     0x2041
  *    </td>
  *    <td>
  *     Mouse Demo Application (and derivatives)
  *    </td>
  *   </tr>
  *
  *   <tr>
  *    <td>
  *     0x03EB
  *    </td>
  *    <td>
  *     0x2042
  *    </td>
  *    <td>
  *     Keyboard Demo Application (and derivatives)
  *    </td>
  *   </tr>
  *
  *   <tr>
  *    <td>
  *     0x03EB
  *    </td>
  *    <td>
  *     0x2043
  *    </td>
  *    <td>
  *     Joystick Demo Application
  *    </td>
  *   </tr>
  *
  *   <tr>
  *    <td>
  *     0x03EB
  *    </td>
  *    <td>
  *     0x2044
  *    </td>
  *    <td>
  *     CDC Demo Application
  *    </td>
  *   </tr>
  *
  *   <tr>
  *    <td>
  *     0x03EB
  *    </td>
  *    <td>
  *     0x2045
  *    </td>
  *    <td>
  *     Mass Storage Demo Application
  *    </td>
  *   </tr>
  *
  *   <tr>
  *    <td>
  *     0x03EB
  *    </td>
  *    <td>
  *     0x2046
  *    </td>
  *    <td>
  *     Audio Output Demo Application
  *    </td>
  *   </tr>
  *
  *   <tr>
  *    <td>
  *     0x03EB
  *    </td>
  *    <td>
  *     0x2047
  *    </td>
  *    <td>
  *     Audio Input Demo Application
  *    </td>
  *   </tr>
  *
  *   <tr>
  *    <td>
  *     0x03EB
  *    </td>
  *    <td>
  *     0x2048
  *    </td>
  *    <td>
  *     MIDI Demo Application
  *    </td>
  *   </tr>
  *
  *   <tr>
  *    <td>
  *     0x03EB
  *    </td>
  *    <td>
  *     0x2049
  *    </td>
  *    <td>
  *     MagStripe Project
  *    </td>
  *   </tr>
  *
  *   <tr>
  *    <td>
  *     0x03EB
  *    </td>
  *    <td>
  *     0x204A
  *    </td>
  *    <td>
  *     CDC Bootloader
  *    </td>
  *   </tr>
  *
  *   <tr>
  *    <td>
  *     0x03EB
  *    </td>
  *    <td>
  *     0x204B
  *    </td>
  *    <td>
  *     USB to Serial Demo Application
  *    </td>
  *   </tr>
  *
  *   <tr>
  *    <td>
  *     0x03EB
  *    </td>
  *    <td>
  *     0x204C
  *    </td>
  *    <td>
  *     RNDIS Demo Application
  *    </td>
  *   </tr>
  *
  *   <tr>
  *    <td>
  *     0x03EB
  *    </td>
  *    <td>
  *     0x204D
  *    </td>
  *    <td>
  *     * UNUSED - FREE FOR PRIVATE HOBBYIST PROJECTS UNTIL ALLOCATED *
  *    </td>
  *   </tr>
  *
  *   <tr>
  *    <td>
  *     0x03EB
  *    </td>
  *    <td>
  *     0x204E
  *    </td>
  *    <td>
  *     * UNUSED - FREE FOR PRIVATE HOBBYIST PROJECTS UNTIL ALLOCATED *
  *    </td>
  *   </tr>
  *
  *   <tr>
  *    <td>
  *     0x03EB
  *    </td>
  *    <td>
  *     0x204F
  *    </td>
  *    <td>
  *     * UNUSED - FREE FOR PRIVATE HOBBYIST PROJECTS UNTIL ALLOCATED *
  *    </td>
  *   </tr>
  *
  *  </table>
  */

 /** \page Page_BuildLibrary Building as a Library
  *
  *  The MyUSB library can be built as a proper linkable library (with the extention .a) under AVR-GCC, so that
  *  the library does not need to be recompiled with each revision of a user project. Instructions for creating
  *  a library from a given source tree can be found in the AVR-GCC user manual included in the WinAVR install
  *  /Docs/ directory.
  *
  *  However, building the library is <b>not recommended</b>, as the static (compile-time) options will be
  *  unable to be changed without a recompilation of the MyUSB code. Therefore, if the library is to be built
  *  from the MyUSB source, it should be made to be application-specific and compiled with the static options
  *  that are required for each project (which should be recorded along with the library).
  */

 /** \page Page_Migration150 Migrating from V1.5.0 to 1.5.1
  *
  *  Below is migration information for updating existing projects based on the MyUSB library version 1.5.0 to
  *  the 1.5.1 API. It does not indicate all new additions to the library, only areas relevant to making older
  *  projects compatible with the new API.
  *
  *  <b>Library Demos</b>
  *    <ul>
  *     <li>
  *      The USBtoSerial demo was broken in the 1.5.0 release, due to incorrect register polling in place of the
  *      global "Transmitting" flag. The change has been reverted in this release. Projects built upon the demo
  *      so upgrade to the latest code.
  *     </li>
  *     <li>
  *      The HID class demos did not implement the mandatory GetReport HID class request. Projects built upon the HID
  *      demos should upgrade to the latest code.
  *     </li>
  *     <li>
  *      The HID class demos incorrectly reported themselves as boot-protocol enabled HID devices in their descriptors.
  *      Projects built upon the HID demos should upgrade to the latest code.
  *     </li>
  *     <li>
  *      The MIDI device demo had incorrect AudioStreaming interface descriptors. Projects built upon the MIDI demo
  *      should upgrade to the latest code.
  *     </li>
  *     <li>
  *      The AudioOut demo did not correctly tristate the speaker pins when USB was disconnected, wasting power.
  *      Projects built upon the MIDI demo should upgrade to the latest code.
  *     </li>
  *    </ul>
  */
  
 /** \page Page_Migration141 Migrating from V1.4.1 to 1.5.0
  *
  *  Below is migration information for updating existing projects based on the MyUSB library version 1.4.1 to
  *  the 1.5.0 API. It does not indicate all new additions to the library, only areas relevant to making older
  *  projects compatible with the new API.
  *
  *  <b>Library Demos</b>
  *    <ul>
  *     <li>
  *      Previous versions of the library demos had incorrectly encoded BCD version numbers in the descriptors. To
  *      avoid such mistakes in the future, the VERSION_BCD macro has been added to StdDescriptors.h. Existing
  *      projects should at least manually correct the BCD version numbers, or preferably update the descriptors to
  *      encode the version number in BCD format using the new macro.
  *     </li>
  *     <li>
  *      The mandatory GetReport class-specific request was accidentally ommitted from previous versions of the demos
  *      based on the Human Interface Device (HID) class. This has been corrected, and any user projects based on the
  *      HID demos should also be updated accordingly.
  *     </li>
  *     <li>
  *      The CDC demos now correctly send an empty packet directly after a full packet, to end the transmission.
  *      Failure to do this on projects which always or frequently send full packets will cause buffering issues on
  *      the host OS. All CDC user projects are advised to update their transmission routines in the same manner as
  *      the library CDC demos.
  *     </li>
  *     <li>
  *      The previous interrupt-driven Endpoint/Pipe demos did not properly save and restore the currently selected
  *      Endpoint/Pipe when the ISR fired. This has been corrected - user projects based on the interrupt driven
  *      demos should also update to properly save and restore the selected Endpoint/Pipe.
  *     </li>
  *    </ul>
  *
  *  <b>Non-USB Library Components</b>
  *    <ul>
  *     <li>
  *      The Atomic.h and ISRMacro.h header files in MyUSB/Common have been removed, as the library is now only
  *      compatible with avr-libc library versions newer than the time before the functionality of the deleted
  *      headers was available.
  *     </li>
  *    </ul>
  *
  *  <b>Device Mode</b>
  *    <ul>
  *     <li>
  *      The GetDescriptor function (see StdDescriptors.h) now has a new prototype, with altered parameter names and
  *      functions. Existing projects will need to update the GetDescriptor implementation to reflect the new API.
  *      The previously split Type and Index parameters are now passed as the original wValue parameter to the
  *      function, to make way for the USB specification wIndex parameter which is <i>not</i> the same as the
  *      previous Index parameter.
  *     </li>
  *     <li>
  *      The USB_UnhandledControlPacket event (see Events.h) now has new parameter names, to be in line with the
  *      official USB specification. Existing code will need to be altered to use the new parameter names.
  *     </li>
  *     <li>
  *      The USB_CreateEndpoints event (see Events.h) has been renamed to USB_ConfigurationChanged, which is more
  *      appropriate. It fires in an identical manner to the previously named event, thus the only change to be made
  *      is the event name itself in the user project.
  *     </li>
  *     <li>
  *      The USB_Descriptor_Language_t structure no longer exists in StdDescriptors.h, as this was a
  *      psudo-descriptor modelled on the string descriptor. It is replaced by the true USB_Descriptor_String_t type
  *      descriptor as indicated in the USB specification, thus all device code must be updated accordingly.
  *     </li>
  *     <li>
  *      The names of several Endpoint macros have been changed to be more consistant with the rest of the library,
  *      with no implementation changes. This means that existing code can be altered to use the new macro names
  *      with no other considerations required. See Endpoint.h for the new macro names.
  *     </li>
  *     <li>
  *      The previous version of the MassStorage demo had an incorrect value in the SCSI_Request_Sense_Response_t
  *      strucuture named SenseData in SCSI.c which caused some problems with some hosts. User projects based on this
  *      demo should correct the structure value to maintain compatibility across multiple OS platforms.
  *     </li>
  *     <li>
  *      By default, the descriptor structures use the official USB specification names for the elements. Previous
  *      versions of the library used non-standard (but more verbose) names, which are still usable in the current
  *      and future releases when the correct compile time option is enabled. See the StdDescriptors.h file
  *      documentation for more details.
  *     </li>
  *    </ul>
  *
  *  <b>Host Mode</b>
  *    <ul>
  *     <li>
  *      The USB_Host_Request_Header_t structure in HostChapter9.h (used for issuing control requests) has had its
  *      members renamed to the official USB specification names for requests. Existing code will need to be updated
  *      to use the new names.
  *     </li>
  *     <li>
  *      The names of several Pipe macros have been changed to be more consistant with the rest of the library,
  *      with no implementation changes. This means that existing code can be altered to use the new macro names
  *      with no other considerations required. See Pipe.h for the new macro names.
  *     </li>
  *     <li>
  *      By default, the descriptor structures use the official USB specification names for the elements. Previous
  *      versions of the library used non-standard (but more verbose) names, which are still usable in the current
  *      and future releases when the correct compile time option is enabled. See the StdDescriptors.h file
  *      documentation for more details.
  *     </li>
  *     <li>
  *      The names of the macros in Host.h for controlling the SOF generation have been renamed, see the Host.h
  *      module documentation for the new macro names.
  *     </li>
  *   </ul>
  *
  *  <b>Dual Role Mode</b>
  *    <ul>
  *     <li>
  *      The OTG.h header file has been corrected so that the macros now perform their stated functions. Any existing
  *      projects using custom headers to fix the broken OTG header should now be altered to once again use the OTG
  *      header inside the library.
  *     </li>
  *     <li>
  *      The USB_DeviceEnumerationComplete event (see Events.h) now also fires in Device mode, when the host has
  *      finished enumerating the device. Projects relying on the event only firing in Host mode should be updated
  *      so that the event action only ocurrs when the USB_Mode global is set to USB_MODE_HOST.
  *     </li>
  *    </ul>
  */